import pandas as pd
import os
import re
from datetime import date
import yaml
import numpy as np
import requests
#import gspread

# Helper functions

def create_yaml(title, authors, categories, project_handle):
    yaml_break = "---"
    tit = f"title: '{title}'"
    dat = f"date: {date.today()}"
    authors = ", ".join([f"'{author}'" for author in authors])
    aut = f"authors: [{authors}]"
    lay = "layout: post"
    
    # Handle categories/tags
    if categories:
        cat_list = [cat.strip("'") for cat in categories.split(',') if cat.strip()]
        categories = ", ".join([f"'{cat}'" for cat in cat_list])
        catt = f"categories: [{categories}]"
        tagg = f"tags: [{categories}]"
    else:
        catt = "categories: []"
        tagg = "tags: []"

    # Read from template
    with open("links_template.yaml", "r") as file:
        yaml_list = yaml.safe_load(file)

    # Update URL
    if type(project_handle) is float:
        yaml_list['links'][0]['url'] = f"{yaml_list['links'][0]['url']}/openneurosci"
    elif not project_handle:
        yaml_list['links'][0]['url'] = f"{yaml_list['links'][0]['url']}/openneurosci"
    else:
        project_split = project_handle.split(',')[0].strip()
        yaml_list['links'][0]['url'] = f"{yaml_list['links'][0]['url']}/{project_split}"

    links = yaml.dump(yaml_list)

    output = f"{yaml_break}\n{tit}\n{dat}\n{aut}\n{lay}\n{catt}\n{tagg}\n{links}{yaml_break}"
    return output

def create_body(title, image, description, authors, website, video, post_author):
    title = clean_post_title(title)
    root = os.path.abspath("./content/en/post")
    folder_path = os.path.join(root, title)
    os.makedirs(folder_path, exist_ok=True)
    print(f"Created folder: {folder_path}")
    
    image = get_image(image, folder_path)

    if video is None or type(video) is float:
        description = f"{description}\n## Project Author(s)\n{authors}\n## Project Links\n{website}\n***\nThis post was automatically generated by\n{post_author}"
    else:
        if "youtu" in video:
            emb_code = get_youtube_id(video)
            video = f'{{{{< youtube {emb_code} >}}}}'
        description = f"{description}\n## Project Author(s)\n{authors}\n## Project Links\n{website}\n## Project Video\n{video}\n***\nThis post was automatically generated by\n{post_author}"

    output = f"{description}\n***"
    return output

def get_image(image_link, path):
    our_logo = "https://raw.githubusercontent.com/open-neuroscience/open-neuroscience-website/master/content/en/authors/admin/avatar.png"

    if "png" in image_link:
        url = re.findall(r'.+png', image_link)[0]
        filename = os.path.join(path, "featured.png")
    elif "jpg" in image_link:
        url = re.findall(r'.+jpg', image_link)[0]
        filename = os.path.join(path, "featured.jpg")
    elif "gif" in image_link:
        url = re.findall(r'.+gif', image_link)[0]
        filename = os.path.join(path, "featured.gif")
    elif "svg" in image_link:
        url = re.findall(r'.+svg', image_link)[0]
        filename = os.path.join(path, "featured.svg")
    else:
        url = our_logo
        filename = os.path.join(path, "featured.png")

    if url == our_logo:
        with open(f"{os.path.splitext(filename)[0]}.txt", "w") as f:
            f.write(f"problem with {image_link}")

    try:
        response = requests.get(url)
        response.raise_for_status()
        with open(filename, 'wb') as f:
            f.write(response.content)
        print(f"Downloaded image: {filename}")
    except requests.exceptions.RequestException as e:
        print(f"Error downloading image: {e}")
        filename = None

    return filename

def write_md(filename, content):
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"Created file: {filename}")
    except IOError as e:
        print(f"Error writing file {filename}: {e}")

def parse_tags(df):
    # Select columns that start with the specified prefix
    category_columns = df.filter(regex='Project categories').columns
    
    # Function to combine categories for each row
    def combine_categories(row):
        categories = [cat for cat in row if pd.notna(cat)]
        return [f"'{cat.strip()}'" for cat in categories if cat.strip()]  # Remove empty strings and add quotes
    
    # Apply the function to each row
    tags = df[category_columns].apply(combine_categories, axis=1)
    
    # Join the categories into a comma-separated string
    return tags.apply(lambda x: ','.join(x) if x else '')

def clean_post_title(dirty_title, with_path=False):
    clean_title = re.sub(r'\s', '_', dirty_title)
    clean_title = re.sub(r'[^\w]', '_', clean_title)
    clean_title = re.sub(r'_+', '_', clean_title)
    clean_title = clean_title.strip('_')  # Remove leading/trailing underscores
    
    if with_path:
        clean_title = os.path.join("./content/en/post", clean_title, "index.md")
    
    return clean_title

def get_youtube_id(link):
    if '/watch?' in link:
        return re.findall(r'(?<=\?v=|&v=)[\w]+', link)[0]
    else:
        return re.findall(r'(?<=/)[\w]+/?(?:$|\?)', link)[0]

# Main script

def main():
    url = "/home/andre/OneDrive/projects/open-neuroscience/posts/Open Neuroscience post.xlsx"
    try:
        df = pd.read_excel(url)
        print(f"Successfully read spreadsheet. Found {len(df)} rows.")
    except Exception as e:
        print(f"Error reading spreadsheet: {e}")
        return
    
    clean_keys = dict()
    for item in df.columns:
        clean_keys[item]=item.strip()
    #print(clean_keys)
    df = df.rename(columns=clean_keys)
    print(df.columns)
    
    original_columns = df.columns.tolist()

    df['tags'] = df['Project categories']
    print("Tags parsed. Sample tags:")
    print(df['tags'].head())  # Print first few tags for verification
    
    post_df = df[df['posted'].isna() | (df['posted'] == False)].copy()
    print(f"Found {len(post_df)} posts to create.")
    
    post_df['filename'] = post_df["Project Title"].apply(lambda x: clean_post_title(x, with_path=True))
    
    for _, row in post_df.iterrows():
        print(f'\nProcessing post: {row["Project Title"]}')
        print(f"Tags: {row['tags']}")  # Print tags for each post
        yaml_content = create_yaml(row['Project Title'], ['admin'], row['tags'], row['Project and/or author twitter handle'])
        body_content = create_body(
            title=row['Project Title'],
            image=row['Link to raw image of your project'],
            description=row['Description of the project'],
            authors=row['Project Author(s)'],
            website=row['Link to Project Website or GitHub repository'],
            video=row['Link to video for your project (if any)'],
            post_author=row['Post Author']
        )
        post_content = f"{yaml_content}\n{body_content}"
        write_md(row['filename'], post_content)

    # Update 'posted' status
    root_dir = os.path.abspath("./content/en/post")
    df['posted'] = df['Project Title'].apply(lambda x: clean_post_title(x) in os.listdir(root_dir))
    
    print("\nPosts have been created locally.")
    print(f"Total posts created: {sum(df['posted'])}")

if __name__ == "__main__":
    main()

